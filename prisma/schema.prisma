generator client {
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-3.0.x"]
  provider      = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AddingBotsRule {
  restricted
  restrictedAndBan
}

enum ChatSettingName {
  addingBots
  language
  profanityFilter
  timeZone
  votebanLimit
}

enum ChatType {
  channel
  group
  private
  supergroup
}

enum LanguageCode {
  en
  ru
}

enum ProfanityFilterRule {
  enabled
}

model Chat {
  addingBots      AddingBotsRule?
  admins          User[]               @relation("ChatAdmins")
  authorId        Float
  createdAt       DateTime             @default(now())
  displayTitle    String
  editorId        Float
  firstName       String?
  id              Float                @id
  language        LanguageCode
  lastName        String?
  membersCount    Int
  profanityFilter ProfanityFilterRule?
  timeZone        String
  title           String?
  type            ChatType
  updatedAt       DateTime             @updatedAt
  username        String?
  votebanLimit    Int?

  author              User                  @relation("ChatAuthor", fields: [authorId], references: [id])
  chatSettingsHistory ChatSettingsHistory[]
  editor              User                  @relation("ChatEditor", fields: [editorId], references: [id])
  votebans            Voteban[]

  @@index([displayTitle])
}

model ChatSettingsHistory {
  authorId    Float
  chatId      Float
  createdAt   DateTime        @default(now())
  editorId    Float
  id          BigInt          @id @default(autoincrement())
  settingName ChatSettingName
  updatedAt   DateTime        @updatedAt

  author User @relation("ChatSettingsHistoryAuthor", fields: [authorId], references: [id])
  chat   Chat @relation(fields: [chatId], onDelete: Cascade, references: [id])
  editor User @relation("ChatSettingsHistoryEditor", fields: [editorId], references: [id])

  @@unique([chatId, settingName])
}

model SenderChat {
  authorId  Float
  createdAt DateTime @default(now())
  editorId  Float
  firstName String?
  id        Float    @id
  lastName  String?
  title     String?
  type      ChatType
  updatedAt DateTime @updatedAt
  username  String?

  author                      User      @relation("SenderChatAuthor", fields: [authorId], references: [id])
  editor                      User      @relation("SenderChatEditor", fields: [editorId], references: [id])
  votebanAuthorSenderChats    Voteban[] @relation("VotebanAuthorSenderChat")
  votebanCandidateSenderChats Voteban[] @relation("VotebanCandidateSenderChat")
}

model ProfaneWord {
  authorId  Float
  comment   String?
  createdAt DateTime     @default(now())
  editorId  Float
  id        BigInt       @id @default(autoincrement())
  isRoot    Boolean?
  language  LanguageCode
  updatedAt DateTime     @updatedAt
  word      String

  author User @relation("ProfaneWordAuthor", fields: [authorId], references: [id])
  editor User @relation("ProfaneWordEditor", fields: [editorId], references: [id])

  @@unique([word])
}

model User {
  authorId     Float
  createdAt    DateTime @default(now())
  editorId     Float
  firstName    String
  id           Float    @id
  languageCode String?
  lastName     String?
  updatedAt    DateTime @updatedAt
  username     String?

  author                     User                  @relation("UserAuthor", fields: [authorId], references: [id])
  chatAdmins                 Chat[]                @relation("ChatAdmins")
  chatAuthors                Chat[]                @relation("ChatAuthor")
  chatEditors                Chat[]                @relation("ChatEditor")
  chatSettingsHistoryAuthors ChatSettingsHistory[] @relation("ChatSettingsHistoryAuthor")
  chatSettingsHistoryEditors ChatSettingsHistory[] @relation("ChatSettingsHistoryEditor")
  editor                     User                  @relation("UserEditor", fields: [editorId], references: [id])
  profaneWordAuthors         ProfaneWord[]         @relation("ProfaneWordAuthor")
  profaneWordEditors         ProfaneWord[]         @relation("ProfaneWordEditor")
  senderChatAuthors          SenderChat[]          @relation("SenderChatAuthor")
  senderChatEditors          SenderChat[]          @relation("SenderChatEditor")
  userAuthors                User[]                @relation("UserAuthor")
  userEditors                User[]                @relation("UserEditor")
  votebanAuthors             Voteban[]             @relation("VotebanAuthor")
  votebanBanVoterAuthors     VotebanBanVoter[]     @relation("VotebanBanVoterAuthor")
  votebanBanVoterEditors     VotebanBanVoter[]     @relation("VotebanBanVoterEditor")
  votebanCandidates          Voteban[]             @relation("VotebanCandidate")
  votebanEditors             Voteban[]             @relation("VotebanEditor")
  votebanNoBanVoterAuthors   VotebanNoBanVoter[]   @relation("VotebanNoBanVoterAuthor")
  votebanNoBanVoterEditors   VotebanNoBanVoter[]   @relation("VotebanNoBanVoterEditor")

  @@index([updatedAt])
}

model Voteban {
  authorId              Float
  authorSenderChatId    Float?
  banVoters             VotebanBanVoter[]
  candidateId           Float
  candidateSenderChatId Float?
  chatId                Float
  createdAt             DateTime            @default(now())
  editorId              Float
  id                    BigInt              @id @default(autoincrement())
  isCompleted           Boolean?
  messageId             Float
  noBanVoters           VotebanNoBanVoter[]
  updatedAt             DateTime            @updatedAt

  author              User        @relation("VotebanAuthor", fields: [authorId], references: [id])
  authorSenderChat    SenderChat? @relation("VotebanAuthorSenderChat", fields: [authorSenderChatId], references: [id])
  candidate           User        @relation("VotebanCandidate", fields: [candidateId], references: [id])
  candidateSenderChat SenderChat? @relation("VotebanCandidateSenderChat", fields: [candidateSenderChatId], references: [id])
  chat                Chat        @relation(fields: [chatId], onDelete: Cascade, references: [id])
  editor              User        @relation("VotebanEditor", fields: [editorId], references: [id])

  @@unique([chatId, messageId])
  @@index([createdAt])
}

model VotebanBanVoter {
  authorId  Float
  createdAt DateTime @default(now())
  editorId  Float
  id        BigInt   @id @default(autoincrement())
  updatedAt DateTime @updatedAt
  votebanId BigInt

  author  User    @relation("VotebanBanVoterAuthor", fields: [authorId], references: [id])
  editor  User    @relation("VotebanBanVoterEditor", fields: [editorId], references: [id])
  voteban Voteban @relation(fields: [votebanId], onDelete: Cascade, references: [id])

  @@unique([authorId, votebanId])
}

model VotebanNoBanVoter {
  authorId  Float
  createdAt DateTime @default(now())
  editorId  Float
  id        BigInt   @id @default(autoincrement())
  updatedAt DateTime @updatedAt
  votebanId BigInt

  author  User    @relation("VotebanNoBanVoterAuthor", fields: [authorId], references: [id])
  editor  User    @relation("VotebanNoBanVoterEditor", fields: [editorId], references: [id])
  voteban Voteban @relation(fields: [votebanId], onDelete: Cascade, references: [id])

  @@unique([authorId, votebanId])
}
