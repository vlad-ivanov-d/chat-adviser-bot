generator client {
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
  provider      = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AddingBotsRule {
  BAN      @map("ban")
  RESTRICT @map("restrict")
}

enum ChatSettingName {
  ADDING_BOTS                    @map("adding_bots")
  HAS_WARNINGS                   @map("has_warnings")
  LANGUAGE                       @map("language")
  MESSAGES_ON_BEHALF_OF_CHANNELS @map("messages_on_behalf_of_channels")
  PROFANITY_FILTER               @map("profanity_filter")
  TIME_ZONE                      @map("time_zone")
  VOTEBAN_LIMIT                  @map("voteban_limit")
}

enum ChatType {
  CHANNEL    @map("channel")
  GROUP      @map("group")
  PRIVATE    @map("private")
  SUPERGROUP @map("supergroup")
  UNKNOWN    @map("unknown")
}

enum LanguageCode {
  EN @map("en")
  RU @map("ru")
}

enum MessagesOnBehalfOfChannelsRule {
  FILTER @map("filter")
}

enum ProfanityFilterRule {
  FILTER @map("filter")
}

model Chat {
  id                         Float                           @id
  addingBots                 AddingBotsRule?                 @map("adding_bots")
  admins                     User[]                          @relation("ChatAdmins")
  authorId                   Float                           @map("author_id")
  createdAt                  DateTime                        @default(now()) @map("created_at")
  displayTitle               String                          @map("display_title")
  editorId                   Float                           @map("editor_id")
  firstName                  String?                         @map("first_name")
  hasWarnings                Boolean?                        @map("has_warnings")
  language                   LanguageCode
  lastName                   String?                         @map("last_name")
  membersCount               Int                             @map("members_count")
  messagesOnBehalfOfChannels MessagesOnBehalfOfChannelsRule? @map("messages_on_behalf_of_channels")
  profanityFilter            ProfanityFilterRule?            @map("profanity_filter")
  timeZone                   String                          @map("time_zone")
  title                      String?
  type                       ChatType
  updatedAt                  DateTime                        @updatedAt @map("updated_at")
  username                   String?
  votebanLimit               Int?                            @map("voteban_limit")

  author              User                  @relation("ChatAuthor", fields: [authorId], references: [id])
  chatSettingsHistory ChatSettingsHistory[]
  editor              User                  @relation("ChatEditor", fields: [editorId], references: [id])
  messages            Message[]
  votebans            Voteban[]
  warnings            Warning[]

  @@index([displayTitle])
  @@map("chats")
}

model ChatSettingsHistory {
  id          BigInt          @id @default(autoincrement())
  authorId    Float           @map("author_id")
  chatId      Float           @map("chat_id")
  createdAt   DateTime        @default(now()) @map("created_at")
  editorId    Float           @map("editor_id")
  settingName ChatSettingName @map("setting_name")
  updatedAt   DateTime        @updatedAt @map("updated_at")

  author User @relation("ChatSettingsHistoryAuthor", fields: [authorId], references: [id])
  chat   Chat @relation(fields: [chatId], onDelete: Cascade, references: [id])
  editor User @relation("ChatSettingsHistoryEditor", fields: [editorId], references: [id])

  @@unique([chatId, settingName])
  @@map("chat_settings_history")
}

model Message {
  authorId     Float    @map("author_id")
  chatId       Float    @map("chat_id")
  createdAt    DateTime @default(now()) @map("created_at")
  editorId     Float    @map("editor_id")
  mediaGroupId String?  @map("media_group_id")
  messageId    Float    @map("message_id")
  updatedAt    DateTime @updatedAt @map("updated_at")

  author User @relation("MessageAuthor", fields: [authorId], references: [id])
  chat   Chat @relation(fields: [chatId], onDelete: Cascade, references: [id])
  editor User @relation("MessageEditor", fields: [editorId], references: [id])

  @@unique([chatId, messageId])
  @@index([createdAt])
  @@index([mediaGroupId])
  @@map("messages")
}

model SenderChat {
  id        Float    @id
  authorId  Float    @map("author_id")
  createdAt DateTime @default(now()) @map("created_at")
  editorId  Float    @map("editor_id")
  firstName String?  @map("first_name")
  lastName  String?  @map("last_name")
  title     String?
  type      ChatType
  updatedAt DateTime @updatedAt @map("updated_at")
  username  String?

  author                      User      @relation("SenderChatAuthor", fields: [authorId], references: [id])
  editor                      User      @relation("SenderChatEditor", fields: [editorId], references: [id])
  votebanAuthorSenderChats    Voteban[] @relation("VotebanAuthorSenderChat")
  votebanCandidateSenderChats Voteban[] @relation("VotebanCandidateSenderChat")
  warningSenderChats          Warning[] @relation("WarningSenderChat")

  @@map("sender_chats")
}

model ProfaneWord {
  id        BigInt       @id @default(autoincrement())
  authorId  Float        @map("author_id")
  comment   String?
  createdAt DateTime     @default(now()) @map("created_at")
  editorId  Float        @map("editor_id")
  language  LanguageCode
  updatedAt DateTime     @updatedAt @map("updated_at")
  word      String

  author User @relation("ProfaneWordAuthor", fields: [authorId], references: [id])
  editor User @relation("ProfaneWordEditor", fields: [editorId], references: [id])

  @@unique([word])
  @@map("profane_words")
}

model User {
  id           Float    @id
  authorId     Float    @map("author_id")
  createdAt    DateTime @default(now()) @map("created_at")
  editorId     Float    @map("editor_id")
  firstName    String   @map("first_name")
  languageCode String?  @map("language_code")
  lastName     String?  @map("last_name")
  updatedAt    DateTime @updatedAt @map("updated_at")
  username     String?

  author                     User                  @relation("UserAuthor", fields: [authorId], references: [id])
  chatAdmins                 Chat[]                @relation("ChatAdmins")
  chatAuthors                Chat[]                @relation("ChatAuthor")
  chatEditors                Chat[]                @relation("ChatEditor")
  chatSettingsHistoryAuthors ChatSettingsHistory[] @relation("ChatSettingsHistoryAuthor")
  chatSettingsHistoryEditors ChatSettingsHistory[] @relation("ChatSettingsHistoryEditor")
  editor                     User                  @relation("UserEditor", fields: [editorId], references: [id])
  messageAuthors             Message[]             @relation("MessageAuthor")
  messageEditors             Message[]             @relation("MessageEditor")
  profaneWordAuthors         ProfaneWord[]         @relation("ProfaneWordAuthor")
  profaneWordEditors         ProfaneWord[]         @relation("ProfaneWordEditor")
  senderChatAuthors          SenderChat[]          @relation("SenderChatAuthor")
  senderChatEditors          SenderChat[]          @relation("SenderChatEditor")
  userAuthors                User[]                @relation("UserAuthor")
  userEditors                User[]                @relation("UserEditor")
  votebanAuthors             Voteban[]             @relation("VotebanAuthor")
  votebanBanVoterAuthors     VotebanBanVoter[]     @relation("VotebanBanVoterAuthor")
  votebanBanVoterEditors     VotebanBanVoter[]     @relation("VotebanBanVoterEditor")
  votebanCandidates          Voteban[]             @relation("VotebanCandidate")
  votebanEditors             Voteban[]             @relation("VotebanEditor")
  votebanNoBanVoterAuthors   VotebanNoBanVoter[]   @relation("VotebanNoBanVoterAuthor")
  votebanNoBanVoterEditors   VotebanNoBanVoter[]   @relation("VotebanNoBanVoterEditor")
  warningAuthors             Warning[]             @relation("WarningAuthor")
  warningEditors             Warning[]             @relation("WarningEditor")
  warningUsers               Warning[]             @relation("WarningUser")

  @@map("users")
}

model Voteban {
  id                    BigInt              @id @default(autoincrement())
  authorId              Float               @map("author_id")
  authorSenderChatId    Float?              @map("author_sender_chat_id")
  banVoters             VotebanBanVoter[]
  candidateId           Float               @map("candidate_id")
  candidateMediaGroupId String?             @map("candidate_media_group_id")
  candidateSenderChatId Float?              @map("candidate_sender_chat_id")
  chatId                Float               @map("chat_id")
  createdAt             DateTime            @default(now()) @map("created_at")
  editorId              Float               @map("editor_id")
  isCompleted           Boolean?            @map("is_completed")
  messageId             Float               @map("message_id")
  noBanVoters           VotebanNoBanVoter[]
  updatedAt             DateTime            @updatedAt @map("updated_at")

  author              User        @relation("VotebanAuthor", fields: [authorId], references: [id])
  authorSenderChat    SenderChat? @relation("VotebanAuthorSenderChat", fields: [authorSenderChatId], references: [id])
  candidate           User        @relation("VotebanCandidate", fields: [candidateId], references: [id])
  candidateSenderChat SenderChat? @relation("VotebanCandidateSenderChat", fields: [candidateSenderChatId], references: [id])
  chat                Chat        @relation(fields: [chatId], onDelete: Cascade, references: [id])
  editor              User        @relation("VotebanEditor", fields: [editorId], references: [id])

  @@unique([chatId, messageId])
  @@index([createdAt])
  @@map("votebans")
}

model VotebanBanVoter {
  id        BigInt   @id @default(autoincrement())
  authorId  Float    @map("author_id")
  createdAt DateTime @default(now()) @map("created_at")
  editorId  Float    @map("editor_id")
  updatedAt DateTime @updatedAt @map("updated_at")
  votebanId BigInt   @map("voteban_id")

  author  User    @relation("VotebanBanVoterAuthor", fields: [authorId], references: [id])
  editor  User    @relation("VotebanBanVoterEditor", fields: [editorId], references: [id])
  voteban Voteban @relation(fields: [votebanId], onDelete: Cascade, references: [id])

  @@unique([authorId, votebanId])
  @@map("voteban_ban_voters")
}

model VotebanNoBanVoter {
  id        BigInt   @id @default(autoincrement())
  authorId  Float    @map("author_id")
  createdAt DateTime @default(now()) @map("created_at")
  editorId  Float    @map("editor_id")
  updatedAt DateTime @updatedAt @map("updated_at")
  votebanId BigInt   @map("voteban_id")

  author  User    @relation("VotebanNoBanVoterAuthor", fields: [authorId], references: [id])
  editor  User    @relation("VotebanNoBanVoterEditor", fields: [editorId], references: [id])
  voteban Voteban @relation(fields: [votebanId], onDelete: Cascade, references: [id])

  @@unique([authorId, votebanId])
  @@map("voteban_no_ban_voters")
}

model Warning {
  id           BigInt   @id @default(autoincrement())
  authorId     Float    @map("author_id")
  chatId       Float    @map("chat_id")
  createdAt    DateTime @default(now()) @map("created_at")
  editorId     Float    @map("editor_id")
  messageId    Float    @map("message_id")
  senderChatId Float?   @map("sender_chat_id")
  updatedAt    DateTime @updatedAt @map("updated_at")
  userId       Float    @map("user_id")

  author     User        @relation("WarningAuthor", fields: [authorId], references: [id])
  chat       Chat        @relation(fields: [chatId], onDelete: Cascade, references: [id])
  editor     User        @relation("WarningEditor", fields: [editorId], references: [id])
  senderChat SenderChat? @relation("WarningSenderChat", fields: [senderChatId], references: [id])
  user       User        @relation("WarningUser", fields: [userId], references: [id])

  @@index([createdAt])
  @@map("warnings")
}
