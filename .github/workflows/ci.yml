# yaml-language-server: $schema=https://json.schemastore.org/github-action.json

name: Continuous Integration

on:
  push:
    branches: [dev, main]

concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20.12.2
      - name: Cache node modules
        env:
          CACHE_NAME: cache-node-modules
        id: cache-npm
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('**/package-lock.json') }}
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          restore-keys: |
            ${{ runner.os }}-build-${{ env.CACHE_NAME }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install dependencies
        run: npm ci
      - name: Build sources
        run: npm run build
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: |
            Dockerfile
            compose.build.yml
            dist
            package-lock.json
            package.json
            prisma

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20.12.2
      - name: Cache node modules
        env:
          CACHE_NAME: cache-node-modules
        id: cache-npm
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('**/package-lock.json') }}
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          restore-keys: |
            ${{ runner.os }}-build-${{ env.CACHE_NAME }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install dependencies
        run: npm ci
      - name: Run unit tests
        run: npm run test:cov
      - name: Run e2e tests
        run: npm run test:e2e:cov
      - name: Merge unit and e2e test coverage
        run: npm run merge:cov
      - name: Check test coverage badges
        run: npm run make:badges -- --ci
      - name: Run load tests
        run: npm run k6

  deploy:
    environment: |-
      ${{
        github.ref_name == 'main' && 'production'
      }}
    if: github.ref_name == 'main'
    needs: [build, test]
    runs-on: ubuntu-latest
    steps:
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20.12.2
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: app
      - name: Configure SSH
        env:
          SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          eval $(ssh-agent -s)
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
      - name: Start the app in docker
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DATABASE_USER: ${{ secrets.DATABASE_USER }}
          DOCKER_HOST: ${{ secrets.DOCKER_HOST }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          WEBHOOK_DOMAIN: ${{ secrets.WEBHOOK_DOMAIN }}
          WEBHOOK_PATH: ${{ secrets.WEBHOOK_PATH }}
          WEBHOOK_PORT: ${{ secrets.WEBHOOK_PORT }}
          WEBHOOK_SECRET_TOKEN: ${{ secrets.WEBHOOK_SECRET_TOKEN }}
        run: npm run start:prod:docker
